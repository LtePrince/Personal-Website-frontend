name: Deploy Next.js Project

on:
  push:
    branches:
      - main # 监听 main 分支的 push 事件

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 检出仓库代码

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 设置 Node.js 版本

      - name: Install dependencies
        run: npm install

      - name: Build Next.js project
        run: npm run build

      - name: Sync files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./next,./public,./next.config.js,./package.json,./package-lock.json"
          target: "/www/wwwroot/Personal-Website-frontend"

      # 步骤2：远程执行命令 - 使用 appleboy/ssh-action
      - name: Run commands on server
        uses: appleboy/ssh-action@v0.1.10  # 使用最新版本执行脚本
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "文件传输完成，正在重启服务..."
            # 1. 切换到您部署文件的目录
            cd /www/wwwroot/Personal-Website-frontend

            # 2. 确保在远程服务器上安装了PM2（只需执行一次）
            # npm install pm2 -g 
            
            # 3. 停止旧的PM2进程（如果存在）
            pm2 stop frontend-app || true # '|| true' 确保进程不存在时不会报错

            # 4. 重新启动新的PM2进程。PM2会去查找当前的目录下的 package.json 文件。
            # --name frontend-app 是给这个进程起个名字，方便管理
            pm2 start npm --name frontend-app -- start

            # 5. 保存PM2进程列表，使其在服务器重启后自动恢复
            pm2 save
            
            echo "部署成功！"